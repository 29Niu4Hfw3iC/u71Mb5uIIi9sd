from libcontractvm import Wallet, WalletExplorer, ConsensusManager
from forumdapp import ForumManager
from manager import Manager
import sys, time, os

"""
Methods to handles Post, Comments, and Prints
"""
def createPost (inputTitle, inputContent):
	"""
	This method call the createPost method of ForumManager
	@rtype: String (rappresenting the id (Hash) of the message generated by the post request)
	"""
	return manager.actualMan.createPost (inputTitle, inputContent)


def getPostInfo (inputIdPost):
	"""
	This method call the getPostInfo method of ForumManager
	@rtype: JSON Object representing the Post with inputIdPost
	"""
	return manager.actualMan.getPostInfo (inputIdPost)


def listPost ():
	"""
	This method call the listPost method of ForumManager
	@rtype: List of JSON Objects rapresenting posts
	"""
	return manager.actualMan.listPost ()

	
def commentPost (inputIdPost, inputComment):
	"""
	This method call the commentPost method of ForumManager
	@rtype: String (rappresenting the id (Hash) of the message generated by the commentPost request)
	"""
	return manager.actualMan.commentPost (inputIdPost, inputComment)

		
def listContain (listPost, postid):
	"""
	This method check if a Post with postid is contained in listPost
	Try/except to catch exception from API (listPost obtained by listPost that can return an exception)
	@rtype: Bool (postid is contained or not)
	"""
	try:
		for x in listPost:
			if x['id']==postid:
				return True
	except:
		return False


def postHasComment(post, commid):
	"""
	This method check if a Post with postid is contained in listPost
	Try/except to catch exception from API (post obtained by getPostInfo that can return an ex)
	@rtype: Bool (postid is contained or not)
	"""
	try:
		for c in post['comments']:
			if c['id']==commid:
				return True
	except:
		return False

	
def printPostInfo(post):
	"""
	This method print post field and its comments 
	"""
	print ('User ',  manager.getUser(), 'Post with the Chosen ID:')
	print ('--ID= ',post['id'],'\n--Title= ',post['title'],'\n--Content= ',post['content'])
	print (' ------------------------------------------\nComments:')
	for t in post['comments']:
		print ('--Comment ID= ', t['id'], 'with Content= ', t['content'])


def printListPost(posts):
	"""
	This method scan the list posts to print all the post in it
	"""
	print ('User ', manager.getUser(), ' List of All Posts:')
	for x in posts:
		print ('--ID= ',x['id'],'\tTitle= ',x['title'],'\tContent= ',x['content'])
		print (' ------------------------------------------\nComments:')
		for t in x['comments']:
			print ('--Comment ID= ', t['id'], 'with Content= ', t['content'])
		print('')


"""
Methods to handles Polls, Votes, and Prints
"""
def  createPoll (inputTitle, answersList, deadline): 
	"""
	This method call the createPoll method of ForumManager
	@rtype: String (rappresenting the id (Hash) of the message generated by the poll create request)
	"""
	return manager.actualMan.createPoll(inputTitle, answersList, deadline, manager.actualWallet.getAddress())


def getPollInfo (inputIdPoll):
	"""
	This method call the getPollInfo method of ForumManager
	@rtype: JSON Object (representing the Poll with inputIdPoll)
	"""
	return manager.actualMan.getPollInfo (inputIdPoll)		


def listPolls ():
	"""
	This method call the listPolls method of ForumManager
	@rtype: List of JSON Objects rapresenting polls
	"""
	return manager.actualMan.listPolls ()


def vote (inputIdPoll, choise ):
	"""
	This method call the vote method of ForumManager
	@rtype: String (rappresenting the id (Hash) of the message generated by the vote request)
	"""
	try:	
		#Paramaters: 
		#inputdIdPoll=Poll to vote
		#choise= the choise to the poll
		#address= the wallet Address of actual User (A or B)
		return manager.actualMan.vote(inputIdPoll, choise, manager.actualWallet.getAddress())
	except:
		print ('User ' ,manager.getUser(), 'has already voted')
		
	
def pollHasVote(poll, voteid):
	"""
	This method check if a Poll has a vote with voteid
	Try/except to catch exception from API (poll obtained by getPollInfo that can return an exception)
	@rtype: Bool (voteid is contained or not)
	"""
	try:
		for answer in poll['answers']:
			for idVote in answer[0]:
				if idVote==voteid:
					return True
	except:
		return False


def listContain (listPoll, pollid):
	"""
	This method check if a Poll with pollid is contained in listPoll
	Try/except to catch exception from API (listPoll obtained by listPolls that can return an exception)
	@rtype: Bool (pollid is contained or not)
	"""
	try:
		for x in listPoll:
			if x['id']==pollid:
				return True
	except:
		return False


def printListPoll (polls):
	"""
	This method print polls list 
	"""	
	print ('User ', manager.getUser(), ' List of All Polls:')
	for x in polls:
		print ('--ID= ',x['id'],'\tTitle= ',x['title'],'\tDeadline= ', time.asctime(time.gmtime(x['deadline'])))
		print (' ------------------------------------------')
		for t in x['answers']:
			print ('--Answer= ', t[1], 'with votes= ', t[2])
		print('')

def printPollInfo(poll):
	"""
	This method print poll field and its votes 
	"""
	print ('User ',  manager.getUser(), 'Poll with the Chosen ID:')
	print ('--ID= ',poll['id'],'\n--Title= ',poll['title'],'\n--deadline= ', time.asctime(time.gmtime(poll['deadline'])))
	print (' ------------------------------------------\nAnswers:')
	for t in poll['answers']:
			print ('--Answer= ', t[1], 'with votes= ', t[2])
	print('')	


"""
Methods expert part ()
"""

def getUserInfo (player):
	"""
	This method get all the data send by player 
	"""
	return manager.actualMan.getUserInfo(player)


def printUserInfo(UserInfo):
	"""
	This method print all info about a user
	"""
	posts=UserInfo[0]
	print ('User ', manager.getUser(), ' List of All Posts:')
	for x in posts:
		print ('--ID= ',x['id'],'\tTitle= ',x['title'],'\tContent= ',x['content'])

	print ('-----------------------------------------------------------\n')

	comments=UserInfo[1]
	print ('User ', manager.getUser(), ' List of All Comments:')
	for t in comments:
		print ('--Comment ID= ', t['id'], 'with Content= ', t['content'])

	print ('-----------------------------------------------------------\n')

	polls= UserInfo[2]
	print ('User ', manager.getUser(), ' List of All Polls:')
	for x in polls:
		print ('--ID= ',x['id'],'\tTitle= ',x['title'],'\tDeadline= ', time.asctime(time.gmtime(x['deadline'])))
	
	print ('-----------------------------------------------------------\n')
		
		
def editComment (commid, comment):
	"""
	This method call the vote editComment of ForumManager
	@rtype: Bool (True if the edit comment request went well, false if the user is not the owner of the comment)
	"""
	try:
		manager.actualMan.editComment(commid, comment, manager.actualWallet.getAddress())
		return True
	except:
		return False

def editPost  (postid, title, content):
	"""
	This method call the vote editPost of ForumManager
	@rtype: Bool (True if the edit post request went well, false if the user is not the owner of the post)
	"""
	try:
		manager.actualMan.editPost(postid, title, content, manager.actualWallet.getAddress())
		return True
	except:
		return False
	
def	postContainEdit(post, newTitle):
	"""
	This method check if the post has the newTitle
	@rtype: Bool 
	"""
	if post['title']==newTitle:
		return True
	return False

def deleteComment (commid):
	"""
	This method call the vote deleteComment of ForumManager
	@rtype: Bool (True if the delete comment request went well, false if the user is not the owner of the comment)
	"""
	try:
		manager.actualMan.deletComment(commid, manager.actualWallet.getAddress())
		return True
	except:
		return False

def deletePost (postid):
	"""
	This method call the vote deletePost of ForumManager
	@rtype: Bool (True if the delete post request went well, false if the user is not the owner of the post)
	"""
	try:
		manager.actualMan.deletPost(postid, manager.actualWallet.getAddress())
		return True
	except:
		return False

def deletePoll (pollid):
	"""
	This method call the vote deletePoll of ForumManager
	@rtype: Bool (True if the delete poll request went well, false if the user is not the owner of the poll)
	"""
	try:
		manager.actualMan.deletPoll(pollid, manager.actualWallet.getAddress())
		return True
	except:
		return False

if __name__ == "__main__":
	"""
	Method Main of the Test Script
	"""

	consMan = ConsensusManager.ConsensusManager ()
	consMan.bootstrap ("http://127.0.0.1:8181")
	
	#Inizializate of a manager (class Manager) to store wallet and ForumManager data of users A and B
	manager=Manager.ini(consMan)
	
	print ('----This test will performe Basic Test----')
	print ('----Start of Basic Test----')
	
	
	"""
	Steps of basic script test follows (for each one-> step and print)
	"""
	
	##############
	# 		A: postid = createPost ('Hello post', 'Post di test')
	##############
	postid = createPost ('Hello post', 'Post di test')
	print ('User ', manager.getUser(), " POST -> ", postid )


	##############
	# 		~: listPost()   As long as the post (postid) appears
	##############
	#Wait for the message containg Post with postid
	while not listContain(listPost(), postid):
		print('Wait 10 seconds for the list')
		time.sleep (10)
	
	posts=listPost()
	printListPost(posts)

	#This is used to switch from users
	manager.changeUser()
	posts=listPost()
	printListPost(posts)
	

	##############
	# 		A: commid = commentPost (postid, 'This is a comment')
	##############
	manager.changeUser()
	commid = commentPost (postid, 'This is a comment')
	print ('User ', manager.getUser(), ' Comment -> ', commid )


	##############
	# 		~: getPostInfo (postid)   As long as the comment (commid) appears
	############## 
	
	#Wait for the message containg message with commid
	while not postHasComment(getPostInfo (postid), commid):
		print('Wait 10 seconds for the comment')
		time.sleep (10)
		
	post =getPostInfo (postid)
	printPostInfo (post) 

	manager.changeUser()
	post =getPostInfo (postid)
	printPostInfo (post) 


	##############
	# 		B: postid2 = createPost ('Hello post 2', 'Post di test2')
	##############
	postid2 = createPost ('Hello post 2', 'Post di test2')
	print ('User ', manager.getUser(), " POST -> ", postid2 )

	time.sleep (10)
	print('Wait 10 seconds')
	
	
	##############
	# 		B: commid2 = commentPost (postid, 'This is a comment of B')
	##############
	commid2 = commentPost (postid, 'This is a comment of B')
	print ('User ', manager.getUser(), " Comment -> ", commid2 )

	
	##############
	# 		~: getPostInfo (postid) 
	##############
	
	#Wait for the message containg message with commid
	while not postHasComment(getPostInfo (postid), commid2):
		print('Wait 10 seconds the comment')
		time.sleep (10)  
		
	post =getPostInfo (postid)
	printPostInfo (post) 

	manager.changeUser()
	post =getPostInfo (postid)
	printPostInfo (post) 
	
	print ('----END of Basic Test----')

	
	"""
	Advanced Test Script
	"""

	print ('----This test will performe Advanced Test----\n--Start of Advanced Test--')

	"""
	Steps of advanced script test follows (for each one-> step and print)
	"""
	
	
	##############
	# 		A: pollid = createPoll ('title', [answer1, answer2, ...], deadline)
	##############
	#The Poll is created with a deadline of 6 hour
	pollid = createPoll ('PollTitle', ['Answer1_1', 'Answer1_2', 'Answer1_3'], time.time()+3600*6)
	print ('User ', manager.getUser(), " POLL -> ", pollid )
	
	
	##############
	# 		~: listPolls()  As long as the poll (pollid) appears
	##############
	#Wait for the message containg Poll with pollid
	while not listContain(listPolls(), pollid):
		print('Wait 10 seconds for the list')
		time.sleep (10)
	
	polls= listPolls()
	printListPoll(polls)
	
	#This is used to switch from users
	manager.changeUser()
	polls= listPolls()
	printListPoll(polls)
	
	
	##############
	# 		A: voteid1 = vote (pollid, 'answer1')
	#		A: voteid2 = vote (pollid, 'answer2')  This should fail, double vote
	##############
	manager.changeUser()
	voteid1 = vote (pollid, 'Answer1_1')
	print ('User ', manager.getUser(), " Vote -> ", voteid1)

	print ('Wait 10 to continue the test')
	time.sleep (10)

	voteid2 = vote (pollid, 'Answer1_2')  #This produces a message but core logic will handles this in way that discard the vote
	print ('User ', manager.getUser(), " Vote -> ", voteid2 )


	##############
	# 		~: getPollInfo (pollid)   As long as the vote (voteid1) appears
	##############  
	#Wait for the message containg vote with voteid
	while not pollHasVote(getPollInfo (pollid)  , voteid1):
		print('Wait 10 seconds for the vote')
		time.sleep (10)
	
	poll =getPollInfo (pollid)
	printPollInfo (poll)  

	manager.changeUser()
	poll =getPollInfo (pollid)
	printPollInfo (poll)


	##############
	# 		B: voteid3 = vote (pollid, 'answer2')
	##############        
	
	voteid3 = vote (pollid, 'Answer1_2')
	print ('User ', manager.getUser(), " Vote -> ", voteid3 )

	
	##############
	# 		~: getPollInfo (pollid)   As long as the vote (voteid3) appears
	##############  
	while not pollHasVote(getPollInfo (pollid)  , voteid3):
		print('Wait 10 seconds for the vote')
		time.sleep (10)
	
	poll =getPollInfo (pollid)
	printPollInfo (poll)  

	manager.changeUser()
	poll =getPollInfo (pollid)
	printPollInfo (poll)

	
	##############
	# 		B:   pollid2 = createPoll (‘Title’, [‘answer1’, ‘answer2’, …], deadline)
	##############  
	
	
	manager.changeUser()
	#The Poll is created with a deadline of 6 hour
	pollid2 = createPoll ('PollTitle2', ['Answer2_1', 'Answer2_2', 'Answer2_3'], time.time()+7200)
	print ('User ', manager.getUser(), " Poll -> ", pollid2 )
	
	##############
	# 		~:  listPolls ()    
	############## 
	
	while not listContain(listPolls(), pollid2):
		print('Wait 10 seconds for the list')
		time.sleep (10)
	 
	polls= listPolls()
	printListPoll(polls)

	manager.changeUser()
	polls= listPolls()
	printListPoll(polls)
	

	print ('----END of Advanced Test----')

	
	"""
	Expert Test Script
	"""	

	
	print ('----This test will performe Expert Test----\n--Start of Expert Test--')

	"""
	Steps of advanced script test follows (for each one-> step and print)
	"""
		
	##############
	# 		~:  getUserInfo (AUserAddress)
	############## 
	userInfo = getUserInfo (manager.actualWallet.getAddress())
	printUserInfo(userInfo)
	
	manager.changeUser()
	userInfo = getUserInfo (manager.actualWallet.getAddress())
	printUserInfo(userInfo)
	
	
	##############
	# 		B:   editComment (commid, ‘New comment 1 message’)  This should fail, commid is owned by A
	##############
	
	result=editComment (commid, 'New comment 1 message')
	print ('User ', manager.getUser(), " EditComment -> ", commid )
	if result:
		print('EditCommentMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not modify the comment [EditCommentMessage Not Sent]')
	

	##############
	# 		A:   editComment (commid, ‘New comment 2 message’)
	##############
	manager.changeUser()
	result=editComment (commid, 'New comment 2 message')
	print ('User ', manager.getUser(), " EditComment -> ", commid )
	if result:
		print('EditCommentMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not modify the comment [EditCommentMessage Not Sent]')


	##############
	# 		B: editPost (postid, ‘New hello post’, ‘New message!’)    This should fail, postid is owned by A
	##############
	manager.changeUser()
	
	result=editPost (postid, 'New hello post', 'New message!') 
	print ('User ', manager.getUser(), " EditPost -> ", commid )
	if result:
		print('EditPostMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not modify the post [EditPostMessage Not Sent]')
	

	##############
	# 		A: editPost (postid, ‘New hello post’, ‘New message!’)   
	##############
	manager.changeUser()
	
	result=editPost (postid, 'New hello post A', 'New message!') 
	print ('User ', manager.getUser(), " EditPost -> ", commid )
	if result:
		print('EditPostMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not modify the post [EditPostMessage Not Sent]')

	
	
	##############
	# 		~: listPost ()  As long as the post (postid) appears with the changed title
	##############
	#Wait for the message containg Post with postid
	while not postContainEdit(getPostInfo(postid), 'New hello post A'):
		print('Wait 10 seconds for the list')
		time.sleep (10)

	posts=listPost()
	printListPost(posts)
	
	##############
	# 		A: deleteComment (commid)
	##############
	result = deleteComment (commid)
	print ('User ', manager.getUser(), " DeleteComment -> ", commid )
	if result:
		print('DeleteCommentMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not delete the comment [DeleteCommentMessage Not Sent]')
		
	
	##############
	# 		B: commid3 = commentPost (postid, ‘This is a new comment’) 
	##############
	manager.changeUser()
	commid3 = commentPost (postid, 'This is a new comment') 
	print ('User ', manager.getUser(), " Comment -> ", commid3 )
	
	##############
	# 		 A: getPostInfo (postid)    As long as the comment (commid3) appears
	##############
	 
	manager.changeUser()
	#Wait for the message containg message with commid
	while not postHasComment(getPostInfo (postid), commid3):
		print('Wait 10 seconds for the comment')
		time.sleep (10)
		
	getPostInfo (postid)
	
	##############
	# 		A:  deleteComment (commid3)   This should fail, commid3 is owned by B
	##############
	
	result = deleteComment (commid3)   
	print ('User ', manager.getUser(), " DeleteComment -> ", commid3 )
	if result:
		print('DeleteCommentMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not delete the comment [DeleteCommentMessage Not Sent]')
		
	##############
	# 		B:  deleteComment (commid3) 
	##############
	manager.changeUser()
	result = deleteComment (commid3)   
	print ('User ', manager.getUser(), " DeleteComment -> ", commid3 )
	if result:
		print('DeleteCommentMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not delete the comment [DeleteCommentMessage Not Sent]')	
		
	##############
	# 		~:    getPostInfo (postid)    As long as the comment (commid3) disappears
	##############   
	#Wait for the message delete message with commid
	while postHasComment(getPostInfo (postid), commid3):
		print('Wait 10 seconds for the comment')
		time.sleep (10)
		
	getPostInfo (postid)
	
	##############
	# 		B: deletePost (postid)    This should fail, postid is owned by A
	############## 
	result = deletePost (postid)  
	print ('User ', manager.getUser(), " DeletePost -> ", postid )
	if result:
		print('DeletePostMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not delete the post [DeletePostMessage Not Sent]')	
	
	
	
	##############
	# 		A: deletePost (postid)
	############## 
	manager.changeUser()
	result = deletePost (postid)  
	print ('User ', manager.getUser(), " DeletePost -> ", postid )
	if result:
		print('DeletePostMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not delete the post [DeletePostMessage Not Sent]')	
	
	
	##############
	# 		~: listPost ()            As long as the post (postid) disappears
	############## 
	
    #Wait for the message containg Post with postid to disappear
	while listContain(listPost(), postid):
		print('Wait 10 seconds for the list')
		time.sleep (10)   
	
	try:
		posts=listPost()
		printListPost(posts)
	except:	
		print('No posts in the database')
		
	##############
	# 		B: deletePoll (pollid2)
	############## 
	manager.changeUser()
	result = deletePoll (pollid2)
	print ('User ', manager.getUser(), " DeletePoll -> ", pollid2 )
	if result:
		print('DeletePollMessage Successfully Sent')
	else:
		print('User ', manager.getUser(),' can not delete the poll [DeletePollMessage Not Sent]')	
	
	
	##############
	# 		~: listPoll ()            As long as the poll (pollid2) disappears
	############## 
	
	while listContain(listPolls(), pollid2):
		print('Wait 10 seconds for the list')
		time.sleep (10)
		
	polls= listPolls()
	printListPoll(polls)	
	##############
	# 		~:         getUserInfo (BUseraddress)
	############## 
	userInfo = getUserInfo (manager.walletB.getAddress())
	printUserInfo(userInfo)
		
	manager.changeUser()
	userInfo = getUserInfo (manager.walletB.getAddress())
	printUserInfo(userInfo)
	##############
	# 		~:         getUserInfo (AUseraddress)
	############## 
	userInfo = getUserInfo (manager.walletA.getAddress())
	printUserInfo(userInfo)
		
	manager.changeUser()
	userInfo = getUserInfo (manager.walletA.getAddress())
	printUserInfo(userInfo)
	 
		
	print ('----END of Expert Test: You deserve an high score on this project!----')